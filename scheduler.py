# from datetime import datetime, timedelta
# from telegram import Bot
# from telegram import InlineKeyboardButton, InlineKeyboardMarkup
# import pytz
# from config import TIMEZONE

# tz = pytz.timezone(TIMEZONE)
# now = datetime.now(tz)

# def setup_scheduler(job_queue, event, user_id):
#     event_time = datetime.combine(event.date, event.time)
#     reminder_time = event_time - timedelta(minutes=event.reminder_minutes)
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ —É–∂–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
#     if reminder_time < datetime.now():
#         return
    
#     # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
#     job_queue.run_once(
#         send_reminder, 
#         when=reminder_time, 
#         context={
#             'user_id': user_id,
#             'event_id': event.id,
#             'event_name': event.name,
#             'event_time': event.time.strftime('%H:%M')
#         }
#     )

# def send_reminder(context):
#     job = context.job
#     bot = context.bot
    
#     # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
#     keyboard = InlineKeyboardMarkup([
#         [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{job.context['event_id']}")]
#     ])
    
#     bot.send_message(
#         chat_id=job.context['user_id'],
#         text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {job.context['event_name']} –≤ {job.context['event_time']}",
#         reply_markup=keyboard
#     )


from datetime import datetime, timedelta
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
import logging

def setup_scheduler(job_queue, event, user_id):
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        event_datetime = datetime.combine(event.date, event.time)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminder_time = event_datetime - timedelta(minutes=event.reminder_minutes)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ —É–∂–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if reminder_time < datetime.now():
            logging.warning(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event.id} —É–∂–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ")
            return False
        
        # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        job_name = f"reminder_{event.id}_{user_id}"
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        job_queue.run_once(
            callback=send_reminder,
            when=reminder_time,
            name=job_name,
            data={
                'user_id': user_id,
                'event_id': event.id,
                'event_name': event.name,
                'event_time': event.time.strftime('%H:%M')
            }
        )
        return True
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return False

async def send_reminder(context):
    try:
        job = context.job
        bot = context.bot
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{job.data['event_id']}")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        message = await bot.send_message(
            chat_id=job.data['user_id'],
            text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {job.data['event_name']} –≤ {job.data['event_time']}",
            reply_markup=keyboard
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.job.data['message_id'] = message.message_id
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")