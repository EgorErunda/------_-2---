from datetime import datetime, timedelta
import pytz
from config import TIMEZONE
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

logger = logging.getLogger(__name__)

async def send_reminder(context):
    try:
        job = context.job
        event = job.context['event']
        tz = pytz.timezone(TIMEZONE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ
        event_datetime = tz.localize(datetime.combine(event.date, event.time))
        if event_datetime < datetime.now(tz):
            logger.info(f"–°–æ–±—ã—Ç–∏–µ {event.id} —É–∂–µ –ø—Ä–æ—à–ª–æ, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return

        await context.bot.send_message(
            chat_id=event.user.user_id,
            text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {event.name} –≤ {event.time.strftime('%H:%M')}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"complete_{event.id}")
            ]])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

def setup_scheduler(job_queue, event):
    try:
        tz = pytz.timezone(TIMEZONE)
        now = datetime.now(tz)
        event_datetime = tz.localize(datetime.combine(event.date, event.time))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –≤ –±—É–¥—É—â–µ–º
        if event_datetime < now:
            logger.warning(f"–°–æ–±—ã—Ç–∏–µ {event.id} —É–∂–µ –ø—Ä–æ—à–ª–æ")
            return False
            
        reminder_time = event_datetime - timedelta(minutes=event.reminder_minutes)
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        if reminder_time < now:
            reminder_time = now + timedelta(seconds=10)
            
        job_queue.run_once(
            send_reminder,
            when=reminder_time,
            name=f"reminder_{event.id}_{int(reminder_time.timestamp())}",
            context={'event': event}
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return False