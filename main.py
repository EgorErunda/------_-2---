import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from database import initialize_db, User, Event
from keyboards import get_week_keyboard, get_reminder_keyboard
from scheduler import setup_scheduler
from datetime import datetime, timedelta
from config import TIMEZONE, BOT_TOKEN
import pytz
#from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from keyboards import get_day_keyboard

tz = pytz.timezone(TIMEZONE)
now = datetime.now(tz)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
(
    SELECTING_ACTION,
    ADDING_EVENT,
    SETTING_TITLE,
    SETTING_TIME,
    SETTING_REMINDER
) = range(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    User.get_or_create(user_id=user_id)
    
    week_info, keyboard = get_week_keyboard()
    await update.message.reply_text(
        f"üìÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫!\n\n{week_info}",
        reply_markup=keyboard
    )

async def show_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–µ–ª—é"""
    query = update.callback_query
    await query.answer()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –Ω–µ–¥–µ–ª–µ"
    if query.data == "back_to_week":
        week_info, keyboard = get_week_keyboard()
        await query.edit_message_text(
            f"üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è:\n\n{week_info}",
            reply_markup=keyboard
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö callback_data
    try:
        if query.data.startswith('week_'):
            _, week_num, year = query.data.split('_')
            week_num, year = int(week_num), int(year)
        elif query.data == "current_week":
            week_info, keyboard = get_week_keyboard()
            await query.edit_message_text(
                f"üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è:\n\n{week_info}",
                reply_markup=keyboard
            )
            return
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_data: {query.data}, –æ—à–∏–±–∫–∞: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    
    tz = pytz.timezone(TIMEZONE)
    try:
        date = datetime.strptime(f"{year}-W{week_num}-1", "%Y-W%W-%w").date()
        date = tz.localize(datetime.combine(date, datetime.min.time()))
    except ValueError:
        date = datetime.now(tz)
    
    week_info, keyboard = get_week_keyboard(date)
    await query.edit_message_text(
        f"üìÖ –í—ã–±—Ä–∞–Ω–Ω–∞—è –Ω–µ–¥–µ–ª—è:\n\n{week_info}",
        reply_markup=keyboard
    )

async def show_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–Ω—è"""
    query = update.callback_query
    await query.answer()
    
    _, date_str = query.data.split('_')
    date = datetime.strptime(date_str, "%Y-%m-%d").date()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = User.get(user_id=query.from_user.id)
    events = Event.select().where(
        (Event.user == user) & 
        (Event.date == date)
    ).order_by(Event.time)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if events:
        text = f"–°–æ–±—ã—Ç–∏—è –Ω–∞ {date.strftime('%d.%m.%Y')}:\n\n" + \
               "\n".join(f"‚è∞ {e.time.strftime('%H:%M')} - {e.name}" for e in events)
    else:
        text = f"–ù–∞ {date.strftime('%d.%m.%Y')} —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_day_keyboard(date_str)
    
    await query.edit_message_text(text, reply_markup=keyboard)

async def back_to_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –Ω–µ–¥–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    week_info, keyboard = get_week_keyboard()
    await query.edit_message_text(
        f"üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è:\n\n{week_info}",
        reply_markup=keyboard
    )

async def add_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: add_YYYY-MM-DD)
    _, date_str = query.data.split('_', 1)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    context.user_data['event_data'] = {
        'date': date_str
    }
    
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    return SETTING_TITLE
async def add_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    query = update.callback_query
    await query.answer()
    
    _, date_str = query.data.split('_')
    context.user_data['event_date'] = date_str
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    return ADDING_EVENT

async def save_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    context.user_data['event_name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú):")
    return SETTING_TIME

async def set_event_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'event_data' not in context.user_data:
        context.user_data['event_data'] = {}
    
    context.user_data['event_data']['title'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú):")
    return SETTING_TIME

async def set_event_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_obj = datetime.strptime(update.message.text, "%H:%M").time()
        context.user_data['event_data']['time'] = time_obj
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
            reply_markup=get_reminder_keyboard()
        )
        return SETTING_REMINDER
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        return SETTING_TIME

async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if 'event_data' not in context.user_data:
            raise ValueError("–î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω—É—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if not query.data.startswith('reminder_'):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data")
            
        _, minutes_str = query.data.split('_')
        try:
            minutes = int(minutes_str)
        except ValueError:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        event_data = context.user_data['event_data']
        event_time = datetime.combine(
            datetime.strptime(event_data['date'], "%Y-%m-%d").date(),
            event_data['time']
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ —É–∂–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        if event_time < datetime.now():
            raise ValueError("–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ –¥–æ —Å–æ–±—ã—Ç–∏—è
        reminder_time = event_time - timedelta(minutes=minutes)
        if reminder_time < datetime.now():
            raise ValueError("–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î
        try:
            user = User.get(user_id=update.effective_user.id)
            event = Event.create(
                user=user,
                name=event_data['title'],
                date=datetime.strptime(event_data['date'], "%Y-%m-%d").date(),
                time=event_data['time'],
                reminder_minutes=minutes
            )
        except Exception as db_error:
            raise ValueError(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {db_error}")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        try:
            if not setup_scheduler(context.job_queue, event, user.user_id):
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
        except Exception as scheduler_error:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {scheduler_error}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_text = (
            f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {event_data['title']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {event_data['time'].strftime('%H:%M')}\n"
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞: {minutes} –º–∏–Ω—É—Ç"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.edit_message_text(
                text=success_text,
                reply_markup=get_week_keyboard()[1]
            )
        except Exception as msg_error:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_error}")
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=success_text,
                reply_markup=get_week_keyboard()[1]
            )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('event_data', None)
        return ConversationHandler.END
        
    except ValueError as ve:
        error_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(ve)}"
        logging.error(error_text)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
        try:
            await query.edit_message_text(
                text=error_text,
                reply_markup=get_reminder_keyboard()
            )
        except Exception:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=error_text,
                reply_markup=get_reminder_keyboard()
            )
        return SETTING_REMINDER
        
    except Exception as e:
        error_text = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        logging.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        
        try:
            await query.edit_message_text(
                text=error_text,
                reply_markup=get_week_keyboard()[1]
            )
        except Exception:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=error_text,
                reply_markup=get_week_keyboard()[1]
            )
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    logging.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=True)
    
    if update.callback_query:
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    elif update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    initialize_db()
    
    #application.add_handler(CallbackQueryHandler(add_event, pattern='^add_'))
    #application.add_handler(CallbackQueryHandler(back_to_week, pattern='^back_to_week$'))

    application = Application.builder() \
        .token(BOT_TOKEN) \
        .concurrent_updates(True) \
        .build()
    
    application.add_error_handler(error_handler)

    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(add_event_start, pattern='^add_')
        ],
        states={
            SETTING_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_event_title)],
            SETTING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_event_time)],
            SETTING_REMINDER: [CallbackQueryHandler(set_reminder, pattern='^reminder_')]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=False
    )
    
    handlers = [
        CommandHandler('start', start),
        CallbackQueryHandler(show_week, pattern='^week_|^current_week|^back_to_week$'),
        CallbackQueryHandler(show_day, pattern='^day_'),
        conv_handler
    ]
    
    for handler in handlers:
        application.add_handler(handler)
    
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    from config import BOT_TOKEN
    main()